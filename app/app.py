import streamlit as st

from RandomForest import rf_param_selector
from DecisionTree import dt_param_selector
from XGBoost import xgb_param_selector
from LogReg import lr_param_selector

from functions import *

st.set_page_config(page_title="Sopra Steria Project", layout="wide")

st.markdown(""" <style>
#MainMenu {visibility: hidden;}
footer {visibility: hidden;}
</style> """, unsafe_allow_html=True)

RANDOM_SEED = 1

st.title("**Interface projet Sopra Steria** ")

st.subheader("**Sujet**")
st.write("""

Mettre en √©vidence, √† partir de ces donn√©es, une probl√©matique Data Science d‚Äôint√©r√™t de votre choix, pr√©sentant une valeur m√©tier, et de la traiter.

 """)

st.subheader("**Description des donn√©es**")

st.write("""

Le dossier data/ contient deux fichiers : data.csv et socio_demo.csv. Les donn√©es sont tir√©es
de campagnes de marketing direct (d√©marchage t√©l√©phonique) d'une grande institution
bancaire, relatives √† un produit de ¬´ d√©p√¥t √† terme ¬ª. Un d√©p√¥t √† terme est un d√©p√¥t
bancaire qui ne peut √™tre retir√© qu'√† l'√©ch√©ance d'un certain terme ou d'une certaine
p√©riode, en contrepartie d‚Äôun taux d‚Äôint√©r√™t g√©n√©ralement plus √©lev√© que pour un d√©p√¥t
classique (√† vue).

 """)

st.header("**Importation des donn√©es** üíª")

with st.expander("Description des donn√©es:", expanded=False):
     st.write("""

- **DATE** (datetime) : Date du dernier contact 
- **AGE** (int): √Çge du client en ann√©es
- **JOB** (string): Type de m√©tier du client 
- **RELATION** (string): Statut marital du client 
- **EDUCATION** (string): Niveau d‚Äô√©ducation correspondant au dipl√¥me le plus avanc√© obtenu par le client
- **DEFAUT**  (int): Indique si le client a d√©j√† fait d√©faut par le pass√© 
- **BALANCE** (float): Solde du client 
- **PRET_IMMO** (string): Indique si le client a un pr√™t immobilier
- **PRET_PERSO** (string): Indique si le client a un pr√™t √† la consommation
- **CONTACT** (string): Moyen de contact avec le client 
- **DUREE_CONTACT** (int): Dur√©e du dernier √©change avec le client en secondes
- **NB_CONTACT** (int): Nombre de contacts effectu√©s avec le client durant cette campagne (y compris le dernier contact)
- **NB_J_DERNIER_CONTACT** (int): Nombre de jours √©coul√©s apr√®s que le client a √©t√© contact√© pour la derni√®re fois lors d‚Äôune campagne pr√©c√©dente (-1 si le client n‚Äôa jamais √©t√© contact√© auparavant)
- **NB_CONTACT_DERNIERE_CAMPAGNE** (int): Nombre de contacts effectu√©s avec ce client lors de la derni√®re campagne 
- **RESULTAT_DERNIERE_CAMPAGNE** (string): R√©sultat de la pr√©c√©dente campagne marketing 
- **STATUT** (string): Statut dans la campagne actuelle. 
                Souscrit : produit souscrit par le client
                Refus : produit refus√© par le client
                En attente : en attente d‚Äôun retour ou d‚Äôune action du client
                Absent : le client n'a pas d√©croch√© apr√®s des sollicitations multiples pour cette campagne
     """)

uploaded_file = st.file_uploader("Importez le fichier csv.", "csv")

if uploaded_file:
    dataset = load_datas(uploaded_file, encoding="UTF-8")
    st.write(dataset)


st.header("**Data Visualisation** üîé")
st.write("Vous pouvez visualiser les donn√©es et les corr√©lations entre elles ici. Chargez le dataset pour utiliser cette partie.")

st.subheader("**Statistiques**")
st.write("Ici, vous pouvez voir certaines statistiques des variables, comme la moyenne ou l'√©cart-type.")

if  uploaded_file:
    col1, _ , col3 = st.columns([3, 1, 3])

    numerical_cols, categorical_cols = find_numerical_categorical_cols(dataset)

    feature_selected = col1.selectbox("Nom de la variable", [None] + numerical_cols)
    if feature_selected:
        col3.write("Description de la variable")
        col3.write(dataset[feature_selected].describe())



st.subheader("**Graphiques**")
st.write("Vous pouvez visualiser les donn√©es et les corr√©lations entre elles ici. Chargez le dataset pour utiliser cette partie.")

if uploaded_file:
    distribution_plot(dataset)
    scatter_features(dataset)
    donut(dataset)
    time_series(dataset)
    #heatmap(dataset)


st.sidebar.image("ss_logo.png")

st.sidebar.header("Cr√©ation du mod√®le de pr√©diction")

side_expander_split = st.sidebar.expander("Split du dataset", expanded=False)
test_size = side_expander_split.slider("taille du dataset de test (%)", 0, 100, 20)

models = {
    "Logistic regression":lr_param_selector,
    "Decision Tree":dt_param_selector,
    "Random Forest":rf_param_selector,
    "Xtreme Gradient Boosting":xgb_param_selector,
}

side_expander_train = st.sidebar.expander("Entrainez un mod√®le", expanded=True)
model_selected = side_expander_train.selectbox("Choisissez un mood√®le", models.keys())

side_expender_tune = st.sidebar.expander("Modifiez les hyperparam√®tres", expanded=True)
with side_expender_tune:
    model = models[model_selected](RANDOM_SEED)

button = st.sidebar.button("D√©marrez l'entrainement")


### Split en X et y et scale les donn√©es si le dataset a √©t√© upload√©
if uploaded_file:
    X, y = seperate_X_y(dataset)
    X_train, X_test, y_train, y_test = split_dataset(X, y, test_size/100, RANDOM_SEED)
    X_train_scaled, X_test_scaled = scaling(X_train, X_test)


### Bas de page





st.header("**Validation du mod√®le** ‚úîÔ∏è")
st.write("Vous devez d'abord cr√©er un mod√®le dans le menu de gauche.")

if (uploaded_file) and button:#Executer les fonctions si le dataset a √©t√© upload√© et que le bouton a √©t√© activ√©
    model = create_model(model, X_train_scaled, y_train)
    y_pred = model.predict(X_test_scaled)
    model_report(y_test, y_pred)

    col1, col3 = st.columns(2)
